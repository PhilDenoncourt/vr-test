{"version":3,"sources":["box.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","ref","useRef","useState","hovered","hover","clicked","click","useFrame","state","delta","current","rotation","x","y","scale","onClick","event","onPointerOver","onPointerOut","args","color","App","className","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGO,SAASA,EAAIC,GAElB,IAAMC,EAAMC,mBAFa,EAIAC,oBAAS,GAJT,mBAIlBC,EAJkB,KAITC,EAJS,OAKAF,oBAAS,GALT,mBAKlBG,EALkB,KAKTC,EALS,KAWzB,OAJAC,aAAS,SAACC,EAAOC,GACfT,EAAIU,QAAQC,SAASC,GAAK,IAC1BZ,EAAIU,QAAQC,SAASE,GAAK,OAG1B,iDACMd,GADN,IAEEC,IAAKA,EACLc,MAAOT,EAAU,IAAM,EACvBU,QAAS,SAACC,GAAD,OAAWV,GAAOD,IAC3BY,cAAe,SAACD,GAAD,OAAWZ,GAAM,IAChCc,aAAc,SAACF,GAAD,OAAWZ,GAAM,IANjC,UAOE,6BAAae,KAAM,CAAC,EAAG,EAAG,KAC1B,sCAAsBC,MAAOjB,EAAU,UAAY,eCG1CkB,MAnBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,0FACA,sDAEF,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAACzB,EAAD,CAAKyB,SAAU,EAAE,IAAK,EAAG,KACzB,cAACzB,EAAD,CAAKyB,SAAU,CAAC,IAAK,EAAG,YCRjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1872a734.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\nexport function Box(props) {\r\n  // This reference gives us direct access to the THREE.Mesh object\r\n  const ref = useRef()\r\n  // Hold state for hovered and clicked events\r\n  const [hovered, hover] = useState(false)\r\n  const [clicked, click] = useState(false)\r\n  // Subscribe this component to the render-loop, rotate the mesh every frame\r\n  useFrame((state, delta) => {\r\n    ref.current.rotation.x += 0.01\r\n    ref.current.rotation.y += 0.02})\r\n  // Return the view, these are regular Threejs elements expressed in JSX\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={ref}\r\n      scale={clicked ? 1.5 : 1}\r\n      onClick={(event) => click(!clicked)}\r\n      onPointerOver={(event) => hover(true)}\r\n      onPointerOut={(event) => hover(false)}>\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\r\n    </mesh>\r\n  )\r\n}\r\n","import './App.css';\nimport ReactDOM from 'react-dom'\nimport { Canvas } from '@react-three/fiber'\nimport { VRCanvas, DefaultXRControllers, RayGrab, Hands } from '@react-three/xr'\n\nimport { Box} from './box';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Hey - I'm just trying things out.  Think it's pretty cool</p>\n        <p>Push the VR button</p>\n      </header>\n      <VRCanvas >\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <DefaultXRControllers />\n        <Hands />\n        <Box position={[-1.2, 0, 0]} />\n        <Box position={[1.2, 0, 0]} />\n      </VRCanvas>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}