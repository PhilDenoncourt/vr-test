{"version":3,"sources":["logo.svg","box.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","ref","useRef","useState","hovered","hover","clicked","click","useFrame","state","delta","current","rotation","x","scale","onClick","event","onPointerOver","onPointerOut","args","color","ReactDOM","render","position","document","getElementById","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"+LAAe,G,MAAA,IAA0B,kC,8CCIlC,SAASA,EAAIC,GAElB,IAAMC,EAAMC,mBAFa,EAIAC,oBAAS,GAJT,mBAIlBC,EAJkB,KAITC,EAJS,OAKAF,oBAAS,GALT,mBAKlBG,EALkB,KAKTC,EALS,KASzB,OAFAC,aAAS,SAACC,EAAOC,GAAR,OAAmBT,EAAIU,QAAQC,SAASC,GAAK,OAGpD,iDACMb,GADN,IAEEC,IAAKA,EACLa,MAAOR,EAAU,IAAM,EACvBS,QAAS,SAACC,GAAD,OAAWT,GAAOD,IAC3BW,cAAe,SAACD,GAAD,OAAWX,GAAM,IAChCa,aAAc,SAACF,GAAD,OAAWX,GAAM,IANjC,UAOE,6BAAac,KAAM,CAAC,EAAG,EAAG,KAC1B,sCAAsBC,MAAOhB,EAAU,UAAY,eAKzDiB,IAASC,OACP,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACxB,EAAD,CAAKwB,SAAU,EAAE,IAAK,EAAG,KACzB,cAACxB,EAAD,CAAKwB,SAAU,CAAC,IAAK,EAAG,QAE1BC,SAASC,eAAe,SCGXC,MAhCf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BASF,eAAC,IAAD,WACE,iCACA,4BAAYV,SAAU,CAAC,GAAI,GAAI,MAC/B,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAACxB,EAAD,CAAKwB,SAAU,EAAE,IAAK,EAAG,OAE3B,cAAC,IAAD,UACE,cAACxB,EAAD,CAAKwB,SAAU,CAAC,IAAK,EAAG,cClBnBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdd,IAASC,OACP,cAAC,IAAMqB,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.12a3074d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import ReactDOM from 'react-dom'\r\nimport React, { useRef, useState } from 'react'\r\nimport { Canvas, useFrame } from '@react-three/fiber'\r\n\r\nexport function Box(props) {\r\n  // This reference gives us direct access to the THREE.Mesh object\r\n  const ref = useRef()\r\n  // Hold state for hovered and clicked events\r\n  const [hovered, hover] = useState(false)\r\n  const [clicked, click] = useState(false)\r\n  // Subscribe this component to the render-loop, rotate the mesh every frame\r\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\r\n  // Return the view, these are regular Threejs elements expressed in JSX\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={ref}\r\n      scale={clicked ? 1.5 : 1}\r\n      onClick={(event) => click(!clicked)}\r\n      onPointerOver={(event) => hover(true)}\r\n      onPointerOut={(event) => hover(false)}>\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <Canvas>\r\n    <ambientLight />\r\n    <pointLight position={[10, 10, 10]} />\r\n    <Box position={[-1.2, 0, 0]} />\r\n    <Box position={[1.2, 0, 0]} />\r\n  </Canvas>,\r\n  document.getElementById('root'),\r\n)\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { VRCanvas, DefaultXRControllers, RayGrab } from '@react-three/xr'\nimport { ARCanvas } from '@react-three/xr'\nimport { Box } from './box';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <VRCanvas >\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <DefaultXRControllers />\n        <RayGrab>\n          <Box position={[-1.2, 0, 0]} />\n        </RayGrab>\n        <RayGrab>\n          <Box position={[1.2, 0, 0]} />\n        </RayGrab>\n      </VRCanvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}